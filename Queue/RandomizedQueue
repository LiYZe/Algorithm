import edu.princeton.cs.algs4.StdRandom;
import java.util.Iterator;

public class RandomizedQueue<Item> implements Iterable<Item>  {
    private Item[] itemsArr;
    private int size;

    private int rand(){
        int rand = StdRandom.uniform(size);
        while(itemsArr[rand] == null){
            rand = StdRandom.uniform(size);
        }
        return rand;
    }

    private void resize(int cap){
        Item[] CopyOfitem =(Item[]) new Object[cap];
        for (int i = 0; i < size; i++) {
            CopyOfitem[i] = itemsArr[i];
        }
        itemsArr = CopyOfitem;
    }
    // construct an empty randomized queue<
    public RandomizedQueue(){
        size = 0;
        itemsArr = (Item[]) new Object[2];
    }

    // is the randomized queue empty?
    public boolean isEmpty(){
        return (size == 0);
    }

    // return the number of items on the randomized queue
    public int size(){
        return size;
    }

    // add the item
    public void enqueue(Item item){
        if(item == null){
            throw new  IllegalArgumentException();
        }
        if(size == itemsArr.length){
            resize(itemsArr.length*2);
        }
        itemsArr[size++] = item;
    }

    // remove and return a random item
    public Item dequeue(){
        if(isEmpty()){
            throw new java.util.NoSuchElementException();
        }
        int randnum = rand();
        Item item = itemsArr[randnum];
        size--;

        itemsArr[randnum] = itemsArr[size];
        itemsArr[size] = null;
        if(size > 0 && size == (itemsArr.length)/4){
            resize((itemsArr.length)/2);
        }

        return item;
    }

    // return a random item (but do not remove it)
    public Item sample(){
        if(size == 0){
            throw new java.util.NoSuchElementException();
        }
        int randIndex = rand();
        Item item = itemsArr[randIndex];
        return item;
    }

    // return an independent iterator over items in random order
    public Iterator<Item> iterator() {
        Iterator<Item> iter = new RandomQueueIterator<>();
        return iter;
    }

    private class RandomQueueIterator<Item> implements Iterator<Item> {
        private int[] shuffleIndex;
        private int index;
        RandomQueueIterator() {
            shuffleIndex = new int[size];
            for (int i = 0; i < size; i++) {
                shuffleIndex[i] = i;
            }
            StdRandom.shuffle(shuffleIndex);
            index = 0;
        }

        public boolean hasNext(){
            return index < size;
        }

        public Item next(){
            if(!hasNext()){
                throw  new java.util.NoSuchElementException();
            }
            int n = shuffleIndex[index++];
            Item item = (Item) itemsArr[n];
            return item;
        }
        public void remove(){
            throw new UnsupportedOperationException();
        }
    }

    // unit testing (required)
    public static void main(String[] args){
        RandomizedQueue<Integer> test =new RandomizedQueue<>();
        test.enqueue(1);
        test.enqueue(2);
        test.enqueue(3);
        test.dequeue();
        System.out.println(test.size());
        System.out.println(test.isEmpty());
    }
}
